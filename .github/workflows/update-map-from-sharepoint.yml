name: Update map data from SharePoint with Geocoding

on:
  workflow_dispatch: {}
  schedule:
    - cron: "0 7 * * *"
    - cron: "0 8 * * *"

permissions:
  contents: write

jobs:
  update-json:
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Pull SharePoint list, geocode, and build JSON
        shell: pwsh
        env:
          GRAPH_TENANT_ID: ${{ secrets.GRAPH_TENANT_ID }}
          GRAPH_CLIENT_ID: ${{ secrets.GRAPH_CLIENT_ID }}
          GRAPH_CLIENT_SECRET: ${{ secrets.GRAPH_CLIENT_SECRET }}
          SP_SITE_HOSTNAME: ${{ secrets.SP_SITE_HOSTNAME }}
          SP_SITE_PATH: ${{ secrets.SP_SITE_PATH }}
        run: |
          # ---- Get Graph token (client credentials) ----
          $body = @{
            client_id     = $env:GRAPH_CLIENT_ID
            scope         = "https://graph.microsoft.com/.default"
            client_secret = $env:GRAPH_CLIENT_SECRET
            grant_type    = "client_credentials"
          }
          $tok = Invoke-RestMethod -Method Post -Uri "https://login.microsoftonline.com/$($env:GRAPH_TENANT_ID)/oauth2/v2.0/token" -Body $body
          if (-not $tok.access_token) { throw "No Graph token returned." }
          $H = @{ Authorization = "Bearer $($tok.access_token)" }

          # ---- Resolve site (must be hostname:/{path}) ----
          $spHost = $env:SP_SITE_HOSTNAME.TrimEnd('/')
          $spPath = $env:SP_SITE_PATH.TrimStart('/')
          Write-Host ("Debug: HOST.len={0} PATH.len={1}" -f $spHost.Length, $spPath.Length)

          # BRACED to avoid : parsing issue
          $siteUri = "https://graph.microsoft.com/v1.0/sites/${spHost}:/${spPath}"
          Write-Host "Debug: Site URI: $siteUri"

          $site = Invoke-RestMethod -Headers $H -Uri $siteUri
          if (-not $site.id) { throw "Could not resolve site from $siteUri" }
          $siteId = $site.id
          Write-Host "Debug: Site ID: $siteId"
          Write-Host "Debug: Site WebUrl: $($site.webUrl)"

          # ---- Resolve list (robust local match, no $filter brittleness) ----
          $listName = "Properties_by_RVP"
          $lists = Invoke-RestMethod -Headers $H -Uri "https://graph.microsoft.com/v1.0/sites/$siteId/lists?`$select=id,displayName&`$top=999"
          if (-not $lists.value) { throw "Graph returned zero lists for site $($site.webUrl)." }

          # exact -> case-insensitive -> underscore/space variant
          $list = $lists.value | Where-Object { $_.displayName -eq $listName }
          if (-not $list) { $list = $lists.value | Where-Object { $_.displayName.ToLower() -eq $listName.ToLower() } }
          if (-not $list) {
            $alt = $listName -replace '_',' '
            $list = $lists.value | Where-Object { $_.displayName.ToLower() -eq $alt.ToLower() }
          }
          if (-not $list) {
            throw "List '$listName' not found. Available: $($lists.value.displayName -join ', ')"
          }
          $listId = $list.id
          Write-Host "Debug: Using list: $($list.displayName)  ($listId)"

          # ---- Pull all items (expand fields) ----
          $items = @()
          $url = "https://graph.microsoft.com/v1.0/sites/$siteId/lists/$listId/items?`$expand=fields&`$top=999"
          while($url){
            $r = Invoke-RestMethod -Headers $H -Uri $url
            $items += $r.value
            $url = $r.'@odata.nextLink'
          }

          # ---- First run helper: dump detected internal field names for mapping sanity ----
          if($items.Count -gt 0){
            ($items[0].fields | Get-Member -MemberType NoteProperty | Select -ExpandProperty Name) `
              | Sort-Object | Out-File -Encoding utf8 -FilePath "$PWD/detected_sharepoint_fields.txt"
          }

          # ---- Geocode addresses using Nominatim ----
          function Get-Coordinates($address, $city, $state, $zip) {
            $fullAddress = "$address, $city, $state $zip"
            $encodedAddress = [System.Web.HttpUtility]::UrlEncode($fullAddress)
            $url = "https://nominatim.openstreetmap.org/search?q=$encodedAddress&format=json&limit=1"
            try {
              $response = Invoke-RestMethod -Uri $url -Headers @{ "User-Agent" = "GatewayMapBot/1.0" }
              if ($response -and $response.Count -gt 0) {
                return @{
                  lat = [double]$response[0].lat
                  lng = [double]$response[0].lon
                }
              }
            } catch {
              Write-Warning "Geocoding failed for $fullAddress : $_"
            }
            return @{ lat = 0.0; lng = 0.0 }
          }

          # ---- Map SharePoint fields -> map schema ----
          function Map-Row($f) {
            $coords = Get-Coordinates -address $f.field_6 -city $f.field_7 -state $f.field_8 -zip $f.field_9
            [pscustomobject]@{
              name           = $f.Title
              type           = $f.TYPE
              units          = $f.field_2
              manager        = $f.field_3
              assistant_mgr  = $f.field_4
              compliance     = $f.field_5
              address        = $f.field_6
              city           = $f.field_7
              state          = $f.field_8
              zip            = $f.field_9
              office_phone   = $f.field_10
              fax            = $f.field_11
              manager_email  = $f.field_12
              rpm            = $f.field_13
              rvp            = $f.field_14
              owner          = $f.Owner
              legal_entity   = $f.LegalEntity
              lat            = $coords.lat
              lng            = $coords.lng
            }
          }

          $out = foreach($it in $items){ Map-Row $it.fields }

          # ---- Backup previous JSON if exists ----
          $jsonFile = "final_properties_with_coords_and_rvp.json"
          if (Test-Path $jsonFile) {
            $stamp = Get-Date -Format "yyyyMMdd-HHmmss"
            Copy-Item $jsonFile "backup_final_properties_$stamp.json"
          }

          # ---- Write JSON expected by the frontend ----
          $out | ConvertTo-Json -Depth 4 | Set-Content -Encoding utf8 -Path $jsonFile
          Write-Host "Wrote $jsonFile with $($out.Count) rows."

      - name: Commit JSON (and first-time field list)
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Auto-update: final_properties_with_coords_and_rvp.json from SharePoint with geocoding"
          file_pattern: |
            final_properties_with_coords_and_rvp.json
            backup_final_properties_*.json
            detected_sharepoint_fields.txt
          commit_user_name: ${{ secrets.COMMIT_USER_NAME || 'Gateway Map Bot' }}
          commit_user_email: ${{ secrets.COMMIT_USER_EMAIL || 'bot@example.com' }}
