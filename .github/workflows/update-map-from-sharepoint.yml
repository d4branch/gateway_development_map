name: Update map data from SharePoint with Geocoding

on:
  workflow_dispatch: {}
  schedule:
    - cron: "0 7 * * *"
    - cron: "0 8 * * *"

permissions:
  contents: write

jobs:
  update-json:
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Pull SharePoint list, geocode, and build JSON + reports
        shell: pwsh
        env:
          GRAPH_TENANT_ID: ${{ secrets.GRAPH_TENANT_ID }}
          GRAPH_CLIENT_ID: ${{ secrets.GRAPH_CLIENT_ID }}
          GRAPH_CLIENT_SECRET: ${{ secrets.GRAPH_CLIENT_SECRET }}
          SP_SITE_HOSTNAME: ${{ secrets.SP_SITE_HOSTNAME }}
          SP_SITE_PATH: ${{ secrets.SP_SITE_PATH }}
          SP_SITE_ID: ${{ secrets.SP_SITE_ID }}
        run: |
          $ErrorActionPreference = 'Stop'

          # ---- Graph token ----
          $body = @{
            client_id     = $env:GRAPH_CLIENT_ID
            scope         = "https://graph.microsoft.com/.default"
            client_secret = $env:GRAPH_CLIENT_SECRET
            grant_type    = "client_credentials"
          }
          $tok = Invoke-RestMethod -Method Post -Uri ("https://login.microsoftonline.com/{0}/oauth2/v2.0/token" -f $env:GRAPH_TENANT_ID) -Body $body
          if (-not $tok.access_token) { throw "No Graph token returned." }
          $H = @{ Authorization = "Bearer $($tok.access_token)" }

          # ---- Resolve site ----
          if ($env:SP_SITE_ID -and $env:SP_SITE_ID.Trim()) {
            $siteId = $env:SP_SITE_ID.Trim()
          } else {
            $spHost = ($env:SP_SITE_HOSTNAME ?? "").Trim()
            $rawPath = ($env:SP_SITE_PATH ?? "").Trim()
            if (-not $spHost) { throw "SP_SITE_HOSTNAME empty (e.g., gatewaymgt.sharepoint.com)" }
            if (-not $rawPath) { throw "SP_SITE_PATH empty (e.g., sites/Intranet)" }
            if ($spHost -match '^https?://') { $spHost = $spHost -replace '^https?://','' }
            $spHost = $spHost.TrimEnd('/')
            $rawPath = $rawPath.TrimStart('/')

            $candidates = @()
            if ($rawPath -match '^(sites|teams)/') { $candidates += $rawPath }
            else {
              $candidates += $rawPath
              $candidates += ("sites/{0}" -f $rawPath)
              $candidates += ("teams/{0}" -f $rawPath)
            }

            $site = $null
            foreach ($p in ($candidates | Select-Object -Unique)) {
              $siteUri = "https://graph.microsoft.com/v1.0/sites/${spHost}:/${p}"
              try {
                $tmp = Invoke-RestMethod -Headers $H -Uri $siteUri -Method GET -ErrorAction Stop
                if ($tmp -and $tmp.id) { $site = $tmp; break }
              } catch {}
            }
            if (-not $site) {
              $needle = ($rawPath.Split('/') | Select-Object -Last 1)
              try {
                $search = Invoke-RestMethod -Headers $H -Uri ("https://graph.microsoft.com/v1.0/sites?`$search={0}" -f $needle) -Method GET
                if ($search.value) {
                  $cands = $search.value | Where-Object { $_.webUrl -like ("https://{0}/*" -f $spHost) }
                  $targetUrl = "https://{0}/{1}" -f $spHost, $rawPath
                  $site = $cands | Sort-Object `
                    @{Expression={ $_.webUrl -eq $targetUrl }; Descending=$true},
                    @{Expression={ $_.webUrl -match ('/{0}(/|$)' -f [regex]::Escape($rawPath)) }; Descending=$true},
                    @{Expression={ $_.webUrl.Length }; Descending=$true} |
                    Select-Object -First 1
                }
              } catch {}
            }
            if (-not $site -or -not $site.id) { throw "Could not resolve site." }
            $siteId = $site.id
          }

          # ---- Resolve list ----
          $listName = "Properties_by_RVP"
          $listsUrl = "https://graph.microsoft.com/v1.0/sites/$siteId/lists?`$select=id,displayName&`$top=999"
          $lists = Invoke-RestMethod -Headers $H -Uri $listsUrl -Method GET
          if (-not $lists.value) { throw "No lists found for site id $siteId." }

          $list = $lists.value | Where-Object { $_.displayName -eq $listName }
          if (-not $list) { $list = $lists.value | Where-Object { $_.displayName.ToLower() -eq $listName.ToLower() } }
          if (-not $list) {
            $alt = ($listName -replace '_',' ')
            $list = $lists.value | Where-Object { $_.displayName.ToLower() -eq $alt.ToLower() }
          }
          if (-not $list) { throw "List '$listName' not found." }
          $listId = $list.id

          # ---- Pull items ----
          $items = @()
          $url = "https://graph.microsoft.com/v1.0/sites/$siteId/lists/$listId/items?`$expand=fields&`$top=999"
          while ($url) {
            $r = Invoke-RestMethod -Headers $H -Uri $url -Method GET
            $items += $r.value
            $url = $r.'@odata.nextLink'
          }

          # ---- Field dump (debug) ----
          if ($items.Count -gt 0) {
            ($items[0].fields | Get-Member -MemberType NoteProperty | Select-Object -ExpandProperty Name) |
              Sort-Object | Out-File -Encoding utf8 -FilePath "$PWD/detected_sharepoint_fields.txt"
            Write-Host "DEBUG: Detected fields: $(($items[0].fields | Get-Member -MemberType NoteProperty | Select-Object -ExpandProperty Name | Sort-Object) -join ', ')"
          }

          # ---- Map SP fields -> our schema ----
          function Map-Row($f, $propName) {
            function Get-Field($fields, $exact, $fuzzy) {
              if ($fields.PSObject.Properties.Name -contains $exact) { return $fields.$exact }
              $keys = $fields | Get-Member -MemberType NoteProperty | Select-Object -ExpandProperty Name
              $match = $keys | Where-Object { $_ -and $_.ToLower().Contains($fuzzy.ToLower()) } | Select-Object -First 1
              if ($match) { return $fields.$match }
              return $null
            }

            $title         = Get-Field $f 'Title' 'title'
            $type          = Get-Field $f 'TYPE' 'type'
            $units         = Get-Field $f 'field_2' 'units'
            $manager       = Get-Field $f 'field_3' 'manager'
            $assistant_mgr = Get-Field $f 'field_4' 'assistant'
            $compliance    = Get-Field $f 'field_5' 'compliance'
            $address       = Get-Field $f 'field_6' 'address'
            $city          = Get-Field $f 'field_7' 'city'
            $state         = Get-Field $f 'field_8' 'state'
            $zip           = Get-Field $f 'field_9' 'zip'
            $office_phone  = Get-Field $f 'field_10' 'phone'
            $fax           = Get-Field $f 'field_11' 'fax'
            $manager_email = Get-Field $f 'field_12' 'email'
            $rpm           = Get-Field $f 'field_13' 'rpm'
            $rvp           = Get-Field $f 'field_14' 'rvp'
            $owner         = Get-Field $f 'Owner' 'owner'
            $legal_entity  = Get-Field $f 'LegalEntity' 'legal'

            # Lat/Lng: Hard-map to field_15/16 only
            $rawLat = $f.field_15 ?? $null
            $rawLng = $f.field_16 ?? $null
            $castLat = try { [double]$rawLat } catch { 0.0 }
            $castLng = try { [double]$rawLng } catch { 0.0 }

            # Debug for Cedar Glades
            if ($propName -eq 'Cedar Glades') {
              Write-Host "DEBUG: For '$propName': rawLat='$rawLat' → cast=$castLat | rawLng='$rawLng' → cast=$castLng | field_15='$($f.field_15)' | field_16='$($f.field_16)'"
            }

            [pscustomobject]@{
              name              = $title
              type              = $type
              units             = $units
              manager           = $manager
              assistant_mgr     = $assistant_mgr
              compliance        = $compliance
              address           = $address
              city              = $city
              state             = $state
              zip               = $zip
              office_phone      = $office_phone
              fax               = $fax
              manager_email     = $manager_email
              rpm               = $rpm
              rvp               = $rvp
              owner             = $owner
              legal_entity      = $legal_entity
              lat               = $castLat
              lng               = $castLng
              geocode_status    = "unknown"
              geocode_source    = "none"
              geocode_fail_code = $null
            }
          }
          $out = foreach ($it in $items) { Map-Row $it.fields $it.fields.Title }

          # ---- Geocode loop (manual-only) ----
          foreach ($prop in $out) {
            $prop.geocode_status = "unknown"
            $prop.geocode_source = "none"
            $prop.geocode_fail_code = $null

            # Force manual lat/lng from field_15/16
            $rawLat = $f.field_15 ?? $null
            $rawLng = $f.field_16 ?? $null
            $castLat = try { [double]$rawLat } catch { 0.0 }
            $castLng = try { [double]$rawLng } catch { 0.0 }

            if ($castLat -ne 0.0 -and $castLng -ne 0.0) {
              $prop.lat = $castLat
              $prop.lng = $castLng
              $prop.geocode_status = "ok"
              $prop.geocode_source = "manual"
              $existing += $prop
            } else {
              $prop.geocode_status = "failed"
              $prop.geocode_source = "none"
              $prop.geocode_fail_code = "MISSING_MANUAL_COORDS"
              $failed += [pscustomobject]@{
                name               = $prop.name
                address            = $prop.address
                city               = $prop.city
                state              = $prop.state
                zip                = $prop.zip
                rvp                = $prop.rvp
                rpm                = $prop.rpm
                owner              = $prop.owner
                legal              = $prop.legal_entity
                attempted_address  = ($prop.address, $prop.city, $prop.state, $prop.zip) -join ', '
                fail_code          = $prop.geocode_fail_code
              }
            }
          }

          # ---- Save geocache ----
          $geocacheFile = "geocache.json"
          $geocache = @{}
          if (Test-Path $geocacheFile) {
            $geocache = Get-Content $geocacheFile -Raw | ConvertFrom-Json -AsHashtable
          }

          # ---- Backup previous JSON ----
          $jsonFile = "final_properties_with_coords_and_rvp.json"
          if (Test-Path $jsonFile) {
            $stamp = Get-Date -Format "yyyyMMdd-HHmmss"
            Copy-Item $jsonFile ("backup_final_properties_{0}.json" -f $stamp)
          }

          # ---- Write main JSON ----
          $out | ConvertTo-Json -Depth 4 | Set-Content -Encoding utf8 -Path $jsonFile
          Write-Host ("Wrote {0} with {1} rows." -f $jsonFile, $out.Count)

          # ---- Reports ----
          $reportDir = "reports"
          New-Item -ItemType Directory -Force -Path $reportDir | Out-Null
          $failed | ConvertTo-Json -Depth 4 | Set-Content -Encoding utf8 -Path "$reportDir/unmapped_properties.json"
          $failed | Export-Csv -NoTypeInformation -Encoding UTF8 -Path "$reportDir/unmapped_properties.csv"

          $summaryLines = @(
            "Geocoding summary"
            "================="
            ("Existing coords : {0}" -f $existing.Count)
            ("Cache hits      : {0}" -f $cacheHits.Count)
            ("Newly geocoded  : {0}" -f $geocoded.Count)
            ("Failures        : {0}" -f $failed.Count)
            ""
            ("Generated at    : {0}" -f (Get-Date -Format "yyyy-MM-dd HH:mm:ss"))
          )
          $summary = $summaryLines -join "`r`n"
          $summary | Set-Content -Encoding utf8 -Path "$reportDir/geocode_summary.txt"
          Write-Host $summary

      - name: Set git identity (fallback)
        shell: bash
        run: |
          git config --global user.name "Gateway Map Bot"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Commit JSON + reports
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: 'Auto-update: final_properties_with_coords_and_rvp.json (with reason-coded geocoding) + reports'
          file_pattern: |
            final_properties_with_coords_and_rvp.json
            backup_final_properties_*.json
            detected_sharepoint_fields.txt
            geocache.json
            reports/*.csv
            reports/*.json
            reports/*.txt
          commit_user_name: 'Gateway Map Bot'
          commit_user_email: 'github-actions[bot]@users.noreply.github.com'
          commit_author: 'Gateway Map Bot <github-actions[bot]@users.noreply.github.com>'
